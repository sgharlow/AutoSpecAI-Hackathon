name: AutoSpec.AI CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: 18
  PYTHON_VERSION: 3.9

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.node }}
      python-cache-key: ${{ steps.cache-keys.outputs.python }}
    steps:
      - uses: actions/checkout@v4
      
      - id: cache-keys
        run: |
          echo "node=node-${{ hashFiles('**/package-lock.json', '**/package.json') }}" >> $GITHUB_OUTPUT
          echo "python=python-${{ hashFiles('**/requirements.txt') }}" >> $GITHUB_OUTPUT

  lint-and-format:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm run install:all
      
      - name: Lint code
        run: npm run lint
      
      - name: Check formatting
        run: npm run format

  python-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Lambda dependencies
        run: |
          for dir in lambdas/*/; do
            if [ -f "$dir/requirements.txt" ]; then
              echo "Installing dependencies for $dir"
              cd "$dir"
              pip install -r requirements.txt
              cd ../..
            fi
          done
      
      - name: Run Python tests
        run: |
          for dir in lambdas/*/; do
            if [ -f "$dir/test_*.py" ]; then
              echo "Testing $dir"
              cd "$dir"
              python -m pytest test_*.py -v --tb=short || python -m unittest test_*.py -v
              cd ../..
            fi
          done

  frontend-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm run install:all
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm run install:all
      
      - name: Run integration tests
        run: |
          cd testing
          npm run test:integration

  cdk-validation:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install CDK dependencies
        run: |
          cd infra/cdk
          npm install
      
      - name: Install CDK CLI
        run: npm install -g aws-cdk
      
      - name: CDK Synth
        run: |
          cd infra/cdk
          cdk synth
      
      - name: CDK Diff (if template exists)
        run: |
          cd infra/cdk
          cdk diff || echo "No existing stack to diff against"

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm run install:all
      
      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd frontend && npm audit --audit-level=moderate
          cd ../infra/cdk && npm audit --audit-level=moderate

  deploy-dev:
    needs: [lint-and-format, python-tests, frontend-tests, cdk-validation, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          npm run install:all
          pip install -r requirements.txt
      
      - name: Install CDK CLI
        run: npm install -g aws-cdk
      
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      - name: Deploy to development
        run: ./scripts/deploy.sh dev --skip-tests
        env:
          CDK_STACK_NAME: AutoSpecAI-dev
      
      - name: Validate deployment
        run: ./scripts/validate-deployment.sh dev

  deploy-staging:
    needs: [lint-and-format, python-tests, frontend-tests, cdk-validation, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          npm run install:all
          pip install -r requirements.txt
      
      - name: Install CDK CLI
        run: npm install -g aws-cdk
      
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      - name: Deploy to staging
        run: ./scripts/deploy.sh staging --skip-tests
        env:
          CDK_STACK_NAME: AutoSpecAI-staging
      
      - name: Run E2E tests
        run: |
          cd testing
          npm run test:e2e
      
      - name: Validate deployment
        run: ./scripts/validate-deployment.sh staging

  deploy-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          npm run install:all
          pip install -r requirements.txt
      
      - name: Install CDK CLI
        run: npm install -g aws-cdk
      
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      - name: Deploy to production
        run: ./scripts/deploy.sh prod --skip-tests
        env:
          CDK_STACK_NAME: AutoSpecAI-prod
      
      - name: Validate production deployment
        run: ./scripts/validate-deployment.sh prod
      
      - name: Notify deployment success
        run: |
          echo "Production deployment successful!"
          # Add Slack/email notification here